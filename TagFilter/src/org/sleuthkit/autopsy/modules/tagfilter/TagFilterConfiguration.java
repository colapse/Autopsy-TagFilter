/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.modules.tagfilter;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.TskCoreException;

/**
 *
 * @author root
 */
public class TagFilterConfiguration extends javax.swing.JPanel {
	private ArrayList<TagFilter> tagFilters;
	private ArrayList<TagFilterGroup> tagFilterGroups;
	/**
	 * Creates new form TagFilterConfiguration
	 */
	public TagFilterConfiguration() {
		tagFilters = new ArrayList<>();
		tagFilterGroups = new ArrayList<>();
		initComponents();
		configureComponents();
	}
	
	private void configureComponents(){
		//Prepare and fill Combobox with Images
		jComboDatasource.removeAllItems();
		ArrayList<Content> datasources = getDatasources();
		DefaultComboBoxModel<DataSourceCBWrapper> cbModel = new DefaultComboBoxModel<>();
		cbModel.addElement(new DataSourceCBWrapper(null,"All Datasources")); //Add Option "All Datasources"
		if(datasources != null && !datasources.isEmpty()){
			for(Content c : datasources){
				DataSourceCBWrapper dsCBWrapper = new DataSourceCBWrapper(c);
				cbModel.addElement(dsCBWrapper);
			}
		}
		jComboDatasource.setModel(cbModel);
		
	}
	
	private void deleteFilter(TagFilterConfigurationFilterComp pTfPanel){
		if(pTfPanel.getClass() == TagFilterConfigurationFilter.class){
			tagFilters.remove(((TagFilterConfigurationFilter)pTfPanel).getTagFilter());
		}else if(pTfPanel.getClass() == TagFilterConfigurationFilterGroup.class){
			tagFilterGroups.remove(((TagFilterConfigurationFilterGroup)pTfPanel).getTagFilterGroup());
		}
		
		jPanelFilters.remove(pTfPanel);
		
		activateMoveButtons();
		
		jPanelFilters.revalidate();
		jPanelFilters.repaint();
	}
	
	private void moveFilterUp(TagFilterConfigurationFilterComp pTfPanel){
		int oldIndex = getFilterPanelIndex(pTfPanel);
		if(oldIndex > 0){
			jPanelFilters.remove(pTfPanel);
			jPanelFilters.add(pTfPanel, oldIndex-1);
		}
		
		activateMoveButtons();
		
		jPanelFilters.revalidate();
		jPanelFilters.repaint();
	}
	
	private void moveFilterDown(TagFilterConfigurationFilterComp pTfPanel){
		int oldIndex = getFilterPanelIndex(pTfPanel);
		if(oldIndex < jPanelFilters.getComponentCount()-1){
			jPanelFilters.remove(pTfPanel);
			jPanelFilters.add(pTfPanel, oldIndex+1);
		}
		
		activateMoveButtons();
		
		jPanelFilters.revalidate();
		jPanelFilters.repaint();
	}
	
	private int getFilterPanelIndex(TagFilterConfigurationFilterComp pTfPanel){
		int counter = 0;
		for(Component c : jPanelFilters.getComponents()){
			if(c.equals(pTfPanel)){
				return counter;
			}
			counter++;
		}
		
		return -1;
	}
	
	private void activateMoveButtons(){
		int position = 0;
		for(Component c : jPanelFilters.getComponents()){
			if(position == 0){
				((TagFilterConfigurationFilterComp)c).activateButtonUp(false);
			}else{
				((TagFilterConfigurationFilterComp)c).activateButtonUp(true);
			}
			if(position+1 == jPanelFilters.getComponentCount()){
				((TagFilterConfigurationFilterComp)c).activateButtonDown(false);
			}else{
				((TagFilterConfigurationFilterComp)c).activateButtonDown(true);
			}
			
			position++;
		}
	}
	
	private ArrayList<Content> getDatasources(){
	    Case currentCase = Case.getCurrentCase();
	    ArrayList<Content> listDS = new ArrayList<>();
	    try {
		    listDS.addAll(currentCase.getDataSources());
	    } catch (TskCoreException ex) {
		    java.util.logging.Logger.getLogger(TagFilterConfiguration.class.getName()).log(Level.SEVERE, null, ex);
	    }
	    
	    return listDS;
    }

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                txtTitle = new javax.swing.JLabel();
                btnAddFilter = new javax.swing.JButton();
                btnAddFilterGroup = new javax.swing.JButton();
                jScrollFilters = new javax.swing.JScrollPane();
                jPanelFilters = new javax.swing.JPanel();
                btnFilter = new javax.swing.JButton();
                txtDatasource = new javax.swing.JLabel();
                jComboDatasource = new javax.swing.JComboBox<>();

                txtTitle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                org.openide.awt.Mnemonics.setLocalizedText(txtTitle, org.openide.util.NbBundle.getMessage(TagFilterConfiguration.class, "TagFilterConfiguration.txtTitle.text")); // NOI18N

                btnAddFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/modules/tagfilter/icon_add.gif"))); // NOI18N
                org.openide.awt.Mnemonics.setLocalizedText(btnAddFilter, org.openide.util.NbBundle.getMessage(TagFilterConfiguration.class, "TagFilterConfiguration.btnAddFilter.text")); // NOI18N
                btnAddFilter.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAddFilterActionPerformed(evt);
                        }
                });

                btnAddFilterGroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/modules/tagfilter/icon_add.gif"))); // NOI18N
                org.openide.awt.Mnemonics.setLocalizedText(btnAddFilterGroup, org.openide.util.NbBundle.getMessage(TagFilterConfiguration.class, "TagFilterConfiguration.btnAddFilterGroup.text")); // NOI18N
                btnAddFilterGroup.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAddFilterGroupActionPerformed(evt);
                        }
                });

                jScrollFilters.setMinimumSize(new java.awt.Dimension(605, 100));
                jScrollFilters.setPreferredSize(new java.awt.Dimension(605, 200));

                jPanelFilters.setPreferredSize(new java.awt.Dimension(605, 100));
                jPanelFilters.setLayout(new javax.swing.BoxLayout(jPanelFilters, javax.swing.BoxLayout.Y_AXIS));
                jScrollFilters.setViewportView(jPanelFilters);

                btnFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/modules/tagfilter/icon_search.png"))); // NOI18N
                org.openide.awt.Mnemonics.setLocalizedText(btnFilter, org.openide.util.NbBundle.getMessage(TagFilterConfiguration.class, "TagFilterConfiguration.btnFilter.text")); // NOI18N
                btnFilter.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnFilterActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(txtDatasource, org.openide.util.NbBundle.getMessage(TagFilterConfiguration.class, "TagFilterConfiguration.txtDatasource.text")); // NOI18N

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnFilter)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtTitle)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(btnAddFilter)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnAddFilterGroup))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(txtDatasource)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jComboDatasource, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(jScrollFilters, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAddFilter)
                                        .addComponent(btnAddFilterGroup))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboDatasource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtDatasource))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollFilters, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFilter)
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents

        private void btnAddFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilterActionPerformed
		TagFilter tf = new TagFilter();
		tagFilters.add(tf);
		final TagFilterConfigurationFilter tfPanel = new TagFilterConfigurationFilter(tf);
		
		
		jPanelFilters.add(tfPanel);
		
		jPanelFilters.revalidate();
		jPanelFilters.repaint();
		jScrollFilters.updateUI();
		
		activateMoveButtons();
		
		tfPanel.setVisible(true);
		
		//Add Action Listeners
		tfPanel.addButtonDeleteAction(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				deleteFilter(tfPanel);
			}
		});
		
		tfPanel.addButtonDownAction(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				moveFilterDown(tfPanel);
			}
		});
		
		tfPanel.addButtonUpAction(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				moveFilterUp(tfPanel);
			}
		});
        }//GEN-LAST:event_btnAddFilterActionPerformed

        private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
                // TODO add your handling code here:
		ArrayList<AbstractTagFilter> allTags = new ArrayList();//new ArrayList<>();
		for(Component c : jPanelFilters.getComponents()){
			if(c instanceof TagFilterConfigurationFilter){
				TagFilterConfigurationFilter cf = (TagFilterConfigurationFilter)c;
				TagFilter tf = cf.getTagFilter();
				allTags.add(tf);
			}else if(c instanceof TagFilterConfigurationFilterGroup){
				TagFilterConfigurationFilterGroup cfg = (TagFilterConfigurationFilterGroup)c;
				TagFilterGroup tfg = cfg.getTagFilterGroup();
				allTags.add(tfg);
			}
		}
		
		Content selectedDatasource = null;
		DataSourceCBWrapper selectedDSWrapper = (DataSourceCBWrapper)jComboDatasource.getSelectedItem();
		if(selectedDSWrapper != null && selectedDSWrapper.getContent() != null){
			selectedDatasource = selectedDSWrapper.getContent();
		}
		
		TagFilterSearch tfs = new TagFilterSearch(allTags, selectedDatasource);
		
		btnFilter.revalidate();
		tfs.executeDbSearchJob();
        }//GEN-LAST:event_btnFilterActionPerformed

        private void btnAddFilterGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilterGroupActionPerformed
                TagFilterGroup tfg = new TagFilterGroup();
		tagFilterGroups.add(tfg);
		final TagFilterConfigurationFilterGroup tfgPanel = new TagFilterConfigurationFilterGroup(tfg);
		
		
		jPanelFilters.add(tfgPanel);
		
		jPanelFilters.revalidate();
		jPanelFilters.repaint();
		
		activateMoveButtons();
		
		tfgPanel.setVisible(true);
		
		//Add Action Listeners
		tfgPanel.addButtonDeleteAction(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				deleteFilter(tfgPanel);
			}
		});
		
		tfgPanel.addButtonDownAction(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				moveFilterDown(tfgPanel);
			}
		});
		
		tfgPanel.addButtonUpAction(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				moveFilterUp(tfgPanel);
			}
		});
		
        }//GEN-LAST:event_btnAddFilterGroupActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnAddFilter;
        private javax.swing.JButton btnAddFilterGroup;
        private javax.swing.JButton btnFilter;
        private javax.swing.JComboBox<DataSourceCBWrapper> jComboDatasource;
        private javax.swing.JPanel jPanelFilters;
        private javax.swing.JScrollPane jScrollFilters;
        private javax.swing.JLabel txtDatasource;
        private javax.swing.JLabel txtTitle;
        // End of variables declaration//GEN-END:variables
}
