/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.modules.tagfilter;

import java.awt.*;
import java.util.ArrayList;
import javax.swing.border.EmptyBorder;

import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.corecomponentinterfaces.DataContentViewer;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.ContentTag;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * Viewer displays strings extracted from contents.
 */
@ServiceProvider(service = DataContentViewer.class, position = 5)
public class DataContentViewerTags extends javax.swing.JPanel implements DataContentViewer {
	
	private Content content;
    private static final Logger logger = Logger.getLogger(DataContentViewerTags.class.getName());

    /**
     * Creates new form DataContentViewerString
     */
    public DataContentViewerTags() {
        initComponents();
        customizeComponents();
        this.resetComponent();
    }

    private void customizeComponents() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                rightClickMenu = new javax.swing.JPopupMenu();
                copyMenuItem = new javax.swing.JMenuItem();
                selectAllMenuItem = new javax.swing.JMenuItem();
                jPanel1 = new javax.swing.JPanel();
                jScrollPane = new javax.swing.JScrollPane();
                jPanelContent = new javax.swing.JPanel();
                txtTitle = new javax.swing.JLabel();

                copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerTags.class, "DataContentViewerTags.copyMenuItem.text")); // NOI18N
                rightClickMenu.add(copyMenuItem);

                selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerTags.class, "DataContentViewerTags.selectAllMenuItem.text")); // NOI18N
                rightClickMenu.add(selectAllMenuItem);

                setMinimumSize(new java.awt.Dimension(5, 5));

                jPanel1.setPreferredSize(new java.awt.Dimension(502, 424));

                jPanelContent.setBackground(new java.awt.Color(255, 255, 255));
                jPanelContent.setLayout(new javax.swing.BoxLayout(jPanelContent, javax.swing.BoxLayout.Y_AXIS));
                jScrollPane.setViewportView(jPanelContent);

                txtTitle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                txtTitle.setText(org.openide.util.NbBundle.getMessage(DataContentViewerTags.class, "DataContentViewerTags.txtTitle.text")); // NOI18N

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(txtTitle)
                                                .addGap(0, 578, Short.MAX_VALUE)))
                                .addContainerGap())
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                                .addContainerGap())
                );

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
        }// </editor-fold>//GEN-END:initComponents

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenuItem copyMenuItem;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanelContent;
        private javax.swing.JScrollPane jScrollPane;
        private javax.swing.JPopupMenu rightClickMenu;
        private javax.swing.JMenuItem selectAllMenuItem;
        private javax.swing.JLabel txtTitle;
        // End of variables declaration//GEN-END:variables


	//TODO
    private void setDataView(Content pContent) {
        ArrayList<ContentTag> tags = new ArrayList<>();
	
	try {
		tags = new ArrayList<>(Case.getCurrentCase().getServices().getTagsManager().getContentTagsByContent(pContent));
	} catch (TskCoreException ex) {
		Exceptions.printStackTrace(ex);
	}
	
	if(!tags.isEmpty()){
		for(ContentTag tag : tags){
			TagEntry tagEntry = new TagEntry(tag);
			jPanelContent.add(tagEntry);
		}
		jPanelContent.revalidate();
		jPanelContent.repaint();
	}
    }

 

    @Override
    public void setNode(Node selectedNode) {
        if ((selectedNode == null) || (!isSupported(selectedNode))) {
            resetComponent();
            return;
        }

        Lookup lookup = selectedNode.getLookup();
        Content con = lookup.lookup(Content.class);
        if (con != null) {
            this.setDataView(con);
            return;
        }
	
        resetComponent();
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(this.getClass(), "DataContentViewerTags.title");
    }

    @Override
    public String getToolTip() {
        return NbBundle.getMessage(this.getClass(), "DataContentViewerTags.toolTip");
    }

    @Override
    public DataContentViewer createInstance() {
        return new DataContentViewerTags();
    }

    @Override
    public void resetComponent() {
        // clear / reset the fields
        content = null;
        jPanelContent.removeAll();
    }

    @Override
    public boolean isSupported(Node node) {
        if (node == null) {
            return false;
        }
        Content con = node.getLookup().lookup(Content.class);
        if (con != null && con.getSize() > 0) {
            return true;
        }

        return false;
    }

    @Override
    public int isPreferred(Node node) {
        return 1;
    }

    @Override
    public Component getComponent() {
        return this;
    }
    
    private final class TagEntry extends javax.swing.JPanel{
	    private ContentTag tag;
	    private javax.swing.JLabel txtTagComment = new javax.swing.JLabel();
            private javax.swing.JLabel txtSpace = new javax.swing.JLabel();
            private javax.swing.JLabel txtTagName = new javax.swing.JLabel();
	    
	    public TagEntry(ContentTag pTag){
		tag = pTag;
		initialize();
	    }
	    
	    public void initialize(){
		setAlignmentX(0.0F);
                setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));
		jPanelContent.setBorder(new EmptyBorder(10, 10, 10, 10));;
		if(tag != null){

			txtTagName.setForeground(Color.BLACK);
			txtTagName.setFont(new Font("Serif", Font.BOLD, 14));
			txtTagName.setText(tag.getName().getDisplayName());
			add(txtTagName);

			txtSpace.setText("          "); 
			add(txtSpace);
			
			txtTagComment.setForeground(Color.BLACK);
			txtTagComment.setFont(new Font("Serif", Font.PLAIN, 14));
			txtTagComment.setText(tag.getComment()); 
			add(txtTagComment);
		}
	    }
    }
}
